/**
 * @module botbuilder-lg
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { AbstractParseTreeVisitor } from 'antlr4ts/tree';
import { LGTemplateParserVisitor } from './generated/LGTemplateParserVisitor';
import { Template } from './template';
import { IfElseBodyContext, NormalTemplateBodyContext, StructuredBodyContext, SwitchCaseBodyContext } from './generated/LGTemplateParser';
/**
 * Lg template extracter.
 */
export declare class Extractor extends AbstractParseTreeVisitor<Map<string, string[]>> implements LGTemplateParserVisitor<Map<string, string[]>> {
    readonly templates: Template[];
    readonly templateMap: Record<string, Template>;
    /**
     * Creates a new instance of the [Extractor](xref:botbuilder-lg.Extractor) class.
     *
     * @param templates Template list.
     */
    constructor(templates: Template[]);
    /**
     * Extracts the templates and returns a map with their names and bodies.
     *
     * @returns Map object with template names and bodies.
     */
    extract(): Map<string, string[] | Map<string, string[]>>[];
    /**
     * Visit a parse tree produced by LGTemplateParser.normalTemplateBody.
     *
     * @param context The parse tree.
     * @returns The result of visiting the normal template body.
     */
    visitNormalTemplateBody(context: NormalTemplateBodyContext): Map<string, string[]>;
    /**
     * Visit a parse tree produced by the structuredBody labeled alternative in LGTemplateParser.body.
     *
     * @param context The parse tree.
     * @returns The result of visiting the structured body.
     */
    visitStructuredBody(context: StructuredBodyContext): Map<string, string[]>;
    /**
     * Visit a parse tree produced by the ifElseBody labeled alternative in LGTemplateParser.body.
     *
     * @param context The parse tree.
     * @returns The result of visiting the if else body.
     */
    visitIfElseBody(context: IfElseBodyContext): Map<string, string[]>;
    /**
     * Visit a parse tree produced by the switchCaseBody labeled alternative in LGTemplateParser.body.
     *
     * @param context The parse tree.
     * @returns The result of visiting the switch case body.
     */
    visitSwitchCaseBody(context: SwitchCaseBodyContext): Map<string, string[]>;
    /**
     * Gets the default value returned by visitor methods.
     *
     * @returns Empty Map<string,  string[]>.
     */
    protected defaultResult(): Map<string, string[]>;
}
//# sourceMappingURL=extractor.d.ts.map