/**
 * @module botbuilder-dialogs-adaptive
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { Activity } from 'botbuilder';
import { Configurable, Converter, ConverterFactory, DialogContext, DialogStateManager, TemplateInterface } from 'botbuilder-dialogs';
export interface ActivityTemplateConguration {
    template?: string;
}
/**
 * Defines an activity template where the template expression is local aka "inline"
 * and processed through registered language generator.
 */
export declare class ActivityTemplate implements TemplateInterface<Partial<Activity>, DialogStateManager>, ActivityTemplateConguration, Configurable {
    static $kind: string;
    /**
     * Initialize a new instance of ActivityTemplate class.
     *
     * @param template The template to evaluate to create the activity.
     */
    constructor(template?: string);
    /**
     * Gets or sets the template to evaluate to create the activity.
     */
    template: string;
    /**
     * @param _property The key of the conditional selector configuration.
     * @returns The converter for the selector configuration.
     */
    getConverter(_property: keyof ActivityTemplateConguration): Converter | ConverterFactory;
    /**
     * @param config The configuration.
     * @returns A object with the given configuration.
     */
    configure(config: ActivityTemplateConguration): this;
    /**
     * Bind data to template.
     *
     * @param dialogContext DialogContext
     * @param data Data to bind to.
     * @returns A promise representing the asynchronous operation.
     */
    bind(dialogContext: DialogContext, data: DialogStateManager): Promise<Partial<Activity>>;
    toString: () => string;
}
//# sourceMappingURL=activityTemplate.d.ts.map