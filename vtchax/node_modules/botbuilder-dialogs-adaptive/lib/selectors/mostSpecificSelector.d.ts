import { OnCondition } from '../conditions/onCondition';
import { TriggerSelector } from '../triggerSelector';
import { ActionContext } from '../actionContext';
export interface MostSpecificSelectorConfiguration {
    selector?: TriggerSelector;
}
/**
 * Select the most specific true rule implementation of [TriggerSelector](xref:botbuilder-dialogs-adaptive.TriggerSelector).
 */
export declare class MostSpecificSelector extends TriggerSelector implements MostSpecificSelectorConfiguration {
    static $kind: string;
    private readonly _tree;
    selector: TriggerSelector;
    /**
     * Initializes the selector with the set of rules.
     *
     * @param conditionals Possible rules to match.
     * @param _evaluate True by default if rules should be evaluated on select.
     */
    initialize(conditionals: OnCondition[], _evaluate: boolean): void;
    /**
     * Selects the best rule to execute.
     *
     * @param context The context for the current turn of conversation.
     * @returns The best rule in original list to execute.
     */
    select(context: ActionContext): Promise<OnCondition[]>;
}
//# sourceMappingURL=mostSpecificSelector.d.ts.map