"use strict";
/**
 * @module botbuilder-dialogs-adaptive
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecognizerListConverter = exports.RecognizerConverter = void 0;
/**
 * Recognizer converter that implements [Converter](xref:botbuilder-dialogs-declarative.Converter).
 */
class RecognizerConverter {
    /**
     * Initializes a new instance of the [RecognizerConverter](xref:botbuilder-dialogs-adaptive.RecognizerConverter) class.
     *
     * @param _resourceExplorer Resource explorer to use for resolving references.
     */
    constructor(_resourceExplorer) {
        this._resourceExplorer = _resourceExplorer;
    }
    /**
     * Converts an object or string to a [Recognizer](xref:botbuilder-dialogs-adaptive.Recognizer) instance.
     *
     * @param value An object or string value.
     * @returns A new [Recognizer](xref:botbuilder-dialogs-adaptive.Recognizer) instance.
     */
    convert(value) {
        if (typeof value == 'string') {
            const recognizer = this._resourceExplorer.loadType(`${value}.dialog`);
            return recognizer;
        }
        return value;
    }
}
exports.RecognizerConverter = RecognizerConverter;
/**
 * Recognizer list converter that implements [Converter](xref:botbuilder-dialogs-declarative.Converter).
 */
class RecognizerListConverter {
    /**
     * Initializes a new instance of the [MultiLanguageRecognizerConverter](xref:botbuilder-dialogs-adaptive.MultiLanguageRecognizerConverter) class.
     *
     * @param resourceExplorer Resource explorer to use for resolving references.
     */
    constructor(resourceExplorer) {
        this._recognizerConverter = new RecognizerConverter(resourceExplorer);
    }
    /**
     * @param value A list of recognizers as strings or recognizers.
     * @returns The list of recognizers
     */
    /**
     * @param value A list of string or a list of [Recognizer](xref:botbuilder-dialogs.Recognizer).
     * @returns A new list of [Recognizer](xref:botbuilder-dialogs.Recognizer) instances.
     */
    convert(value) {
        const recognizers = [];
        value.forEach((item) => {
            recognizers.push(this._recognizerConverter.convert(item));
        });
        return recognizers;
    }
}
exports.RecognizerListConverter = RecognizerListConverter;
//# sourceMappingURL=recognizerConverter.js.map