/**
 * @module botbuilder-dialogs-adaptive
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { Activity, Entity, RecognizerResult } from 'botbuilder';
import { DialogContext } from 'botbuilder-dialogs';
import { AdaptiveRecognizer } from '../adaptiveRecognizer';
/**
 * Entity recognizers base class.
 */
export declare class EntityRecognizer extends AdaptiveRecognizer {
    /**
     * To recognize intents and entities in a users utterance.
     *
     * @param {DialogContext} dialogContext Dialog Context.
     * @param {Partial<Activity>} activity Activity.
     * @param {object} _telemetryProperties Additional properties to be logged to telemetry with event.
     * @param {object} _telemetryMetrics Additional metrics to be logged to telemetry with event.
     * @returns {Promise<RecognizerResult>} Analysis of utterance.
     */
    recognize(dialogContext: DialogContext, activity: Partial<Activity>, _telemetryProperties?: Record<string, string>, _telemetryMetrics?: Record<string, number>): Promise<RecognizerResult>;
    /**
     * Recognizes entities from an [Entity](xref:botbuilder-core.Entity) list.
     *
     * @param {DialogContext} _dialogContext The [DialogContext](xref:botbuilder-dialogs.DialogContext) for the current turn of conversation.
     * @param {string} _text Text to recognize.
     * @param {string} _locale Locale to use.
     * @param {Entity[]} _entities The [Entity](xref:botbuilder-core.Entity) list to be recognized.
     * @returns {Promise<Entity[]>} Recognized [Entity](xref:botbuilder-core.Entity) list.
     */
    recognizeEntities(_dialogContext: DialogContext, _text: string, _locale: string, _entities: Entity[]): Promise<Entity[]>;
}
//# sourceMappingURL=entityRecognizer.d.ts.map