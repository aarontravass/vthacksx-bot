"use strict";
/**
 * @module botbuilder-ai
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BindToActivity = void 0;
/**
 * Creates a new template to send the user based on the activity.
 */
class BindToActivity {
    /**
     * Initializes a new instance of the [BindToActivity](xref:botbuilder-ai.BindToActivity) class.
     *
     * @param activity The activity to send the user.
     * @returns Template to send the user.
     */
    constructor(activity) {
        this.activity = activity;
    }
    /**
     * Binds the provided activity.
     *
     * @param _context The dialog context.
     * @param _data Data to bind to. If Null, then dc.State will be used.
     * @returns The linked activity.
     */
    // eslint-disable-next-line @typescript-eslint/ban-types
    bind(_context, _data) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.activity;
        });
    }
}
exports.BindToActivity = BindToActivity;
//# sourceMappingURL=bindToActivity.js.map